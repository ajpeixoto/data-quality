#!/usr/bin/groovy

/**
 * Jenkins pipeline to take care of the Continuous Integration for TDP
 */

// Constants

def AWS_POD_LABEL = "TDQ-SE-${UUID.randomUUID().toString()}"

def decodedJobName = env.JOB_NAME.replaceAll("%2F", "/")
def branchType = getBranchType "${env.BRANCH_NAME}"

pipeline {
    agent {
        kubernetes {
            label AWS_POD_LABEL
            yamlFile 'ci/podTemplate.yml'
        }
    }

    parameters {
        booleanParam(name: 'm2Clear', defaultValue: false, description: 'Clear m2 path')
        string(name: 'm2PathToClear', defaultValue: '/root/.m2/repository/org/talend/dataquality', description: 'Remove if m2Clear true')
    }

    options {
        // Only keep the 10 most recent builds for master branch, 2 for the other branches
        buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: env.BRANCH_NAME == 'master' ? '10' : '2'))
        disableConcurrentBuilds()
        ansiColor('xterm')
        timeout(time: 1, unit: 'HOURS')
    }

    environment {
        SLACK_CHANNEL = 'tdq_ci'
        PROJECT_TEAM = 'dataquality'
        PROJECT_NAME = 'parent'
        SONAR_URL = "https://sonar-eks.datapwn.com"
        SONAR_OPTS = "-Dsonar.host.url=${SONAR_URL} -Dsonar.projectKey=${PROJECT_TEAM}:${PROJECT_NAME} -Dsonar.projectName=${PROJECT_TEAM}-${PROJECT_NAME}"
        SONAR_DASHBOARD_URL = "${SONAR_URL}/dashboard?id=dataquality%3Aparent"

    }

    stages {

        stage("clear m2") {
            when {
                expression { return params.m2Clear }
            }
            steps {
                container('talend-jdk8-builder-base') {
                    sh '''#! /bin/bash
                        rm -rf ${m2PathToClear}
                    '''
                }
            }
        }

        /*
         * Build stage:
         *      - compile DQ SE Libs
         *      - launch all TUs
         */
        stage('Build & Test') {
            steps {
                container('talend-jdk8-builder-base') {
                    configFileProvider([configFile(fileId: 'maven-settings-nexus-zl', variable: 'MAVEN_SETTINGS')]) {
                        sh 'java -version'
                        sh 'mvn --version'
                        sh 'mvn -U clean test -B --fail-at-end -s $MAVEN_SETTINGS'
                    }
                }
            }
            post {
                always {
                    junit testResults: '**/target/surefire-reports/*.xml'
                }
            }
        }
		
		// JOB > PIPELINE : Sonar analysis  
        stage("Sonarqube analysis") {
            steps {
                container('sonar-scanner') {
                    withSonarQubeEnv('sonar') {
                        script {
                            if (branchType == 'pull-request') {
                                SONAR_DASHBOARD_URL = "${SONAR_DASHBOARD_URL}&pullRequest=${env.CHANGE_ID}"
                                sh """
                                    mvn $SONAR_OPTS -Dsonar.pullrequest.key=${env.CHANGE_ID} -Dsonar.pullrequest.branch=${env.CHANGE_BRANCH} -Dsonar.pullrequest.base=${env.CHANGE_TARGET} sonar:sonar
                                """
                            } else if (branchType == 'maintenance') {
                                SONAR_DASHBOARD_URL = "${SONAR_DASHBOARD_URL}&branch=${env.BRANCH_NAME}"
                                date = sh(script: 'date +%Y-%m-%d', returnStdout: true).trim()
                                sh """
                                    mvn $SONAR_OPTS -Dsonar.projectVersion=$date.${env.GIT_COMMIT} sonar:sonar
                                """
                            } else {
                                SONAR_DASHBOARD_URL = "${SONAR_DASHBOARD_URL}&branch=${env.BRANCH_NAME}"
                                sh """
                                    mvn $SONAR_OPTS -Dsonar.branch.name=${env.BRANCH_NAME} sonar:sonar
                                """
                            }
                            echo "Sonar URL is ${SONAR_DASHBOARD_URL}"
                        }
                    }
                }
            }
        }
        /*
        * Publishing artifact stage (only if it is a releasable branch):
        *       - Deploy every DQ-SE module jar on Nexus
         */
        stage('Publishing artifact') {
            when { expression { return env.BRANCH_NAME == 'master' || env.BRANCH_NAME =~ 'maintenance.*' } }
            steps {
                container('talend-jdk8-builder-base') {
                    configFileProvider([configFile(fileId: 'maven-settings-nexus-zl', variable: 'MAVEN_SETTINGS')]) {
                        echo "Deploy DQ Libs SE jar on Nexus"
                        sh 'mvn deploy -DskipTests -B -s $MAVEN_SETTINGS'
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME =~ 'maintenance.*') {
                    slackSend(color: '#82bd41', channel: "${SLACK_CHANNEL}", message: "SUCCESS: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>) (<${SONAR_DASHBOARD_URL}|Open Sonar Analysis>)")
                }
            }
        }
        failure {
            script {
                if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME =~ 'maintenance.*') {
                    slackSend(color: '#e96065', channel: "${SLACK_CHANNEL}", message: "FAILED: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                }
            }
        }

        unstable {
            script {
                if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME =~ 'maintenance.*') {
                    slackSend(color: '#ea8330', channel: "${SLACK_CHANNEL}", message: "UNSTABLE: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                }
            }
        }

        aborted {
            script {
                if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME =~ 'maintenance.*') {
                    slackSend(color: '#c6c6c6', channel: "${SLACK_CHANNEL}", message: "ABORTED: `${decodedJobName}` #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                }
            }
        }
    }
}

@NonCPS
static def getBranchType(String branchName) {
    def pr_pattern = 'PR-.*'
    def maintenance_pattern = "maintenance*"

    def branchType
    switch (branchName) {
        case ~pr_pattern:
            branchType = 'pull-request'
            break
        case ~maintenance_pattern:
            branchType = 'maintenance'
            break
        default:
            branchType = 'unknown'
    }
    branchType
}
